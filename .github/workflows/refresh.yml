name: Daily refresh
on:
  schedule:
    - cron: "15 0 * * *"
  workflow_dispatch:
jobs:
  run-etl:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r etl/requirements.txt
        
      - name: Ensure directories exist
        run: |
          mkdir -p data
          mkdir -p web/public/series
          
      - name: Generate initial data if needed
        run: |
          if [ ! -f "data/history.parquet" ]; then
            echo "No history.parquet found, generating initial data..."
            python etl/create_initial_data.py
          else
            echo "History data already exists, skipping initialization"
          fi
          
      - name: Test FRED API directly
        env:
          FRED_API_KEY: ${{ secrets.FRED_API_KEY }}
        run: |
          echo "Testing FRED API directly with Python"
          echo "FRED_API_KEY is $(if [[ -n "$FRED_API_KEY" ]]; then echo "set"; else echo "NOT SET"; fi)"
          python -c "import requests; print('API response:', requests.get('https://api.stlouisfed.org/fred/series/observations?series_id=RRPONTSYD&api_key=' + '${{ secrets.FRED_API_KEY }}' + '&file_type=json&sort_order=desc&limit=1').json())"

      - name: Run ETL script
        env:
          FRED_API_KEY: ${{ secrets.FRED_API_KEY }}
        run: |
          echo "Running ETL script with Python $(python --version)"
          echo "FRED_API_KEY is $(if [[ -n "$FRED_API_KEY" ]]; then echo "set"; else echo "NOT SET"; fi)"
          
          # Create a simple fetch script for debugging
          cat > debug_fetch.py << EOL
import requests
import os
import json

def test_fred():
    key = os.environ.get('FRED_API_KEY', '')
    print(f"API key length: {len(key)}")
    
    try:
        # Test the series search endpoint
        url1 = f"https://api.stlouisfed.org/fred/series/search?search_text=RRPONTSYD&api_key={key}&file_type=json"
        r1 = requests.get(url1, timeout=30)
        print(f"Series search status: {r1.status_code}")
        if r1.status_code == 200:
            print(f"Series search data: {json.dumps(r1.json(), indent=2)}")
        
        # Test the observations endpoint
        url2 = f"https://api.stlouisfed.org/fred/series/observations?series_id=RRPONTSYD&api_key={key}&file_type=json&sort_order=desc&limit=1"
        r2 = requests.get(url2, timeout=30)
        print(f"Observations status: {r2.status_code}")
        if r2.status_code == 200:
            data = r2.json()
            print(f"Observations keys: {list(data.keys())}")
            if 'observations' in data and data['observations']:
                print(f"Latest observation: {data['observations'][0]}")
            else:
                print("No observations returned")
        
    except Exception as e:
        print(f"Error: {e}")

if __name__ == "__main__":
    test_fred()
EOL
          
          # Run the debug script
          python debug_fetch.py
          
          # Run the actual ETL script
          python etl/fetch_data.py || echo "ETL script failed but continuing"
                    
      - name: Commit and push changes
        run: |
          git config user.email "action@github.com"
          git config user.name "GitHub Action"
          git status
          git add data/ web/public/ || echo "No files to add"
          git status
          git commit -m "data $(date +'%F')" || echo "No changes to commit"
          git push || echo "No changes to push" 