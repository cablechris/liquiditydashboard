name: Daily refresh
on:
  schedule:
    - cron: "15 0 * * *"
  workflow_dispatch:
jobs:
  run-etl:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r etl/requirements.txt
        
      - name: Ensure directories exist
        run: |
          mkdir -p data
          mkdir -p web/public/series
          
      - name: Generate initial data if needed
        run: |
          if [ ! -f "data/history.parquet" ]; then
            echo "No history.parquet found, generating initial data..."
            python etl/create_initial_data.py
          else
            echo "History data already exists, skipping initialization"
          fi
          
      - name: Validate FRED API key
        env:
          FRED_API_KEY: ${{ secrets.FRED_API_KEY }}
        run: |
          echo "Validating FRED API key..."
          MASKED_KEY="${FRED_API_KEY:0:4}...${FRED_API_KEY: -4}"
          echo "FRED_API_KEY length: ${#FRED_API_KEY} characters"
          echo "FRED_API_KEY is: $MASKED_KEY"
          
          if [ ${#FRED_API_KEY} -ne 32 ]; then
            echo "WARNING: FRED API key is not 32 characters long"
          fi
          
          # Export CI flag for enhanced debugging in fetch_data.py
          echo "CI=true" >> $GITHUB_ENV
          
          # Simple test without revealing the key
          python -c "
import os, requests
key = os.environ.get('FRED_API_KEY', '')
print(f'FRED API key length: {len(key)}')
if key:
    try:
        # Test endpoint that doesn't require series permissions
        url = f'https://api.stlouisfed.org/fred/category?category_id=0&api_key={key}&file_type=json'
        response = requests.get(url, timeout=30)
        print(f'Status code: {response.status_code}')
        if response.status_code == 200:
            print('API key is valid!')
        else:
            print(f'API key test failed. Status: {response.status_code}')
            print(f'Response: {response.text[:500]}')
    except Exception as e:
        print(f'Error testing API key: {e}')
"

      - name: Run ETL script
        env:
          FRED_API_KEY: ${{ secrets.FRED_API_KEY }}
          CI: true
        id: etl
        continue-on-error: true
        run: |
          echo "Running ETL script with Python $(python --version)"
          echo "FRED_API_KEY is set with length: ${#FRED_API_KEY}"
          python etl/fetch_data.py
          
      - name: Fallback data generation if ETL failed
        if: steps.etl.outcome == 'failure'
        run: |
          echo "ETL script failed. Generating fallback data..."
          python etl/fallback_data.py
                    
      - name: Commit and push changes
        run: |
          git config user.email "action@github.com"
          git config user.name "GitHub Action"
          git status
          git add data/ web/public/ || echo "No files to add"
          git status
          git commit -m "data $(date +'%F')" || echo "No changes to commit"
          git push || echo "No changes to push" 